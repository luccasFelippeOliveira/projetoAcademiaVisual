/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import DAO.ModalidadesJpaController;
import DataBase.Modalidades;
import academiavisual.FormPrincipal;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;

/**
 *
 * @author afnsoo
 */
public class JInternalFrameCadastroModalidade extends javax.swing.JInternalFrame {

    /**
     * Creates new form JInternalFrameCadastroModalidade
     */
    public JInternalFrameCadastroModalidade() {
        initComponents();
        if(TelaInicial.verificarAdministrador(FormPrincipal.TREINADORID)){
            jButtonInserirModalidade.setEnabled(false);
            jButtonAlterarModalidade.setEnabled(false);
            jButtonExcluirModalidade.setEnabled(false);            
        }
        abaConsulta();
        System.out.println("ModalidadeList Class : " + modalidadesList1.getClass().getName());
        System.out.println("Size: " + modalidadesList1.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        AcademiaVisualPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("AcademiaVisualPU").createEntityManager();
        modalidadesQuery = java.beans.Beans.isDesignTime() ? null : AcademiaVisualPUEntityManager.createQuery("SELECT m FROM Modalidades m");
        modalidadesList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : modalidadesQuery.getResultList();
        modalidadesQuery1 = java.beans.Beans.isDesignTime() ? null : AcademiaVisualPUEntityManager.createQuery("SELECT m FROM Modalidades m");
        modalidadesList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : modalidadesQuery1.getResultList();
        jButtonExcluirModalidade = new javax.swing.JButton();
        jButtonFecharModalidade = new javax.swing.JButton();
        jTabbedPaneModalidade = new javax.swing.JTabbedPane();
        jPanelConsultaModalidade = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableModalidade = new javax.swing.JTable();
        jLabelProcurarModalidade = new javax.swing.JLabel();
        jTextFieldProcurarModalidade = new javax.swing.JTextField();
        jComboBoxProcurarModalidade = new javax.swing.JComboBox();
        jButtonProcurarModalidade = new javax.swing.JButton();
        jPanelAlterarAluno = new javax.swing.JPanel();
        jLabelNomeModalidade = new javax.swing.JLabel();
        jLabelMaxAlunosModalidade = new javax.swing.JLabel();
        jLabelHorarioInicioModalidade = new javax.swing.JLabel();
        jLabelHorarioFinalModalidade = new javax.swing.JLabel();
        jLabelPrecoModalidade = new javax.swing.JLabel();
        jTextFieldNomeModalidade = new javax.swing.JTextField();
        jTextFieldMaxAlunosModalidade = new javax.swing.JTextField();
        jTextFieldHorarioInicioModalidade = new javax.swing.JTextField();
        jTextFieldHorarioFinalModalidade = new javax.swing.JTextField();
        jTextFieldPrecoModalidade = new javax.swing.JTextField();
        jLabelIdModalidade = new javax.swing.JLabel();
        jTextFieldIdModalidade = new javax.swing.JTextField();
        jButtonCancelarModalidade = new javax.swing.JButton();
        jButtonConfirmarModalidade = new javax.swing.JButton();
        jButtonInserirModalidade = new javax.swing.JButton();
        jButtonAlterarModalidade = new javax.swing.JButton();

        setTitle("Cadastro Modalidade");

        jButtonExcluirModalidade.setText("Excluir");
        jButtonExcluirModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirModalidadeActionPerformed(evt);
            }
        });

        jButtonFecharModalidade.setText("Fechar");
        jButtonFecharModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharModalidadeActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, modalidadesList1, jTableModalidade);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${maxAlunos}"));
        columnBinding.setColumnName("Max. Alunos");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${preco}"));
        columnBinding.setColumnName("Preco");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${horarioInicio}"));
        columnBinding.setColumnName("Hra. Inicio");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${horarioFinal}"));
        columnBinding.setColumnName("Hra. Fim");
        columnBinding.setColumnClass(Float.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTableModalidade);

        jLabelProcurarModalidade.setText("Opção De Busca");

        jTextFieldProcurarModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProcurarModalidadeActionPerformed(evt);
            }
        });

        jComboBoxProcurarModalidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Id", "Nome" }));

        jButtonProcurarModalidade.setText("Buscar");
        jButtonProcurarModalidade.setMaximumSize(new java.awt.Dimension(75, 23));
        jButtonProcurarModalidade.setMinimumSize(new java.awt.Dimension(75, 23));
        jButtonProcurarModalidade.setPreferredSize(new java.awt.Dimension(75, 23));
        jButtonProcurarModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcurarModalidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaModalidadeLayout = new javax.swing.GroupLayout(jPanelConsultaModalidade);
        jPanelConsultaModalidade.setLayout(jPanelConsultaModalidadeLayout);
        jPanelConsultaModalidadeLayout.setHorizontalGroup(
            jPanelConsultaModalidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
            .addGroup(jPanelConsultaModalidadeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelProcurarModalidade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxProcurarModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldProcurarModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonProcurarModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelConsultaModalidadeLayout.setVerticalGroup(
            jPanelConsultaModalidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaModalidadeLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanelConsultaModalidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProcurarModalidade)
                    .addComponent(jTextFieldProcurarModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProcurarModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxProcurarModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPaneModalidade.addTab("Consulta", jPanelConsultaModalidade);

        jLabelNomeModalidade.setText("Nome:");

        jLabelMaxAlunosModalidade.setText("Max. Alunos:");

        jLabelHorarioInicioModalidade.setText("Horario Inicio:");

        jLabelHorarioFinalModalidade.setText("Horario Final:");

        jLabelPrecoModalidade.setText("Preco:");

        jLabelIdModalidade.setText("ID:");

        jTextFieldIdModalidade.setEnabled(false);

        javax.swing.GroupLayout jPanelAlterarAlunoLayout = new javax.swing.GroupLayout(jPanelAlterarAluno);
        jPanelAlterarAluno.setLayout(jPanelAlterarAlunoLayout);
        jPanelAlterarAlunoLayout.setHorizontalGroup(
            jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAlterarAlunoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPrecoModalidade)
                    .addComponent(jLabelHorarioFinalModalidade)
                    .addComponent(jLabelHorarioInicioModalidade)
                    .addComponent(jLabelMaxAlunosModalidade)
                    .addComponent(jLabelNomeModalidade)
                    .addComponent(jLabelIdModalidade))
                .addGap(97, 97, 97)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldNomeModalidade, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(jTextFieldMaxAlunosModalidade)
                    .addComponent(jTextFieldHorarioInicioModalidade, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldHorarioFinalModalidade, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldPrecoModalidade, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldIdModalidade))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanelAlterarAlunoLayout.setVerticalGroup(
            jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAlterarAlunoLayout.createSequentialGroup()
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAlterarAlunoLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jTextFieldIdModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAlterarAlunoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelIdModalidade)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeModalidade)
                    .addComponent(jTextFieldNomeModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMaxAlunosModalidade)
                    .addComponent(jTextFieldMaxAlunosModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHorarioInicioModalidade)
                    .addComponent(jTextFieldHorarioInicioModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelHorarioFinalModalidade)
                    .addComponent(jTextFieldHorarioFinalModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrecoModalidade)
                    .addComponent(jTextFieldPrecoModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        jTabbedPaneModalidade.addTab("Alterar", jPanelAlterarAluno);

        jButtonCancelarModalidade.setText("Cancelar");
        jButtonCancelarModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarModalidadeActionPerformed(evt);
            }
        });

        jButtonConfirmarModalidade.setText("Confirmar");
        jButtonConfirmarModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarModalidadeActionPerformed(evt);
            }
        });

        jButtonInserirModalidade.setText("Inserir");
        jButtonInserirModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInserirModalidadeActionPerformed(evt);
            }
        });

        jButtonAlterarModalidade.setText("Alterar");
        jButtonAlterarModalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarModalidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneModalidade)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonInserirModalidade)
                .addGap(18, 18, 18)
                .addComponent(jButtonAlterarModalidade)
                .addGap(18, 18, 18)
                .addComponent(jButtonExcluirModalidade)
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmarModalidade)
                .addGap(18, 18, 18)
                .addComponent(jButtonCancelarModalidade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonFecharModalidade)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneModalidade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInserirModalidade)
                    .addComponent(jButtonAlterarModalidade)
                    .addComponent(jButtonExcluirModalidade)
                    .addComponent(jButtonFecharModalidade)
                    .addComponent(jButtonCancelarModalidade)
                    .addComponent(jButtonConfirmarModalidade))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Bind automático não funiona como o esperado. Os métodos abaixo circulam este problema.
    /**
     * Popula os textField da aba Alterar.
     *
     * @param a Fonte dos dados para o textField, caso seja null os campos serão
     * esvaziados.
     */
    private void popularCamposAlterar(Modalidades m) {
        if (m == null) {
            jTextFieldHorarioFinalModalidade.setText("");
            jTextFieldHorarioInicioModalidade.setText("");
            jTextFieldMaxAlunosModalidade.setText("");
            jTextFieldNomeModalidade.setText("");
            jTextFieldIdModalidade.setText("");           
            jTextFieldPrecoModalidade.setText("");
        } else {
            jTextFieldHorarioFinalModalidade.setText(Float.toString(m.getHorarioFinal()));
            jTextFieldHorarioInicioModalidade.setText(Float.toString(m.getHorarioInicio()));
            jTextFieldMaxAlunosModalidade.setText(Float.toString(m.getMaxAlunos()));
            jTextFieldNomeModalidade.setText(m.getNome());
            jTextFieldIdModalidade.setText(Integer.toString(m.getId()));           
            jTextFieldPrecoModalidade.setText(Float.toHexString(m.getPreco()));
        }
    }

    /**
     * Após a edição do objeto pega dados da aba Alterar e coloca no objeto.
     *
     * @param a Objeto a ser populado.
     */
    private void popularObjeto(Modalidades m) {
        //TODO: Garantir que @param não é nulo
        /*O campo ID é gerado pelo banco de dados*/
        m.setNome(jTextFieldNomeModalidade.getText());
        m.setHorarioInicio(Float.parseFloat(jTextFieldHorarioInicioModalidade.getText())); 
        m.setHorarioFinal(Float.parseFloat(jTextFieldHorarioFinalModalidade.getText()));
        m.setMaxAlunos(Float.parseFloat(jTextFieldMaxAlunosModalidade.getText()));
        m.setPreco(Float.parseFloat(jTextFieldPrecoModalidade.getText()));        
    }

    /**
     * Entra na Aba de Consulta
     */
    private void abaConsulta() {
        jTabbedPaneModalidade.setSelectedIndex(0);
        jTabbedPaneModalidade.setEnabledAt(0, true);
        jTabbedPaneModalidade.setEnabledAt(1, false);
        jButtonConfirmarModalidade.setEnabled(false);
        jButtonCancelarModalidade.setEnabled(false);
        jButtonInserirModalidade.setEnabled(true);
        jButtonAlterarModalidade.setEnabled(true);
        jButtonExcluirModalidade.setEnabled(true);
    }

    /**
     * Entra na Aba de Alterar
     */
    private void abaAlterar() {
        jTabbedPaneModalidade.setSelectedIndex(1);
        jTabbedPaneModalidade.setEnabledAt(1, true);
        jTabbedPaneModalidade.setEnabledAt(0, false);
        jButtonInserirModalidade.setEnabled(false);
        jButtonAlterarModalidade.setEnabled(false);
        jButtonExcluirModalidade.setEnabled(false);
        jButtonConfirmarModalidade.setEnabled(true);
        jButtonCancelarModalidade.setEnabled(true);

    }

    /**
     * Valida os campos de acordo com as normas:
     * <ul>
     * <li> 
     * <li> 
     * <li> 
     * <li> 
     * <li> 
     * <li> 
     * </ul>
     *
     * @return <b>true</b> caso passe na validação, <b>false</b> caso contrário.
     */
    private boolean validacaoDeCampos() {
        boolean valido = true;
        String msgErro = "";
        String campo;      

        //Checa o campo Hra. Final
        campo = jTextFieldHorarioFinalModalidade.getText();
        if (("".equals(campo)) || (Float.parseFloat(campo) > 24.59) || (Float.parseFloat(campo) < 0)) {
            valido = false;
            msgErro += "Horario Final invalido. Deve estar entre 0.0 e 24.59\n";
            jTextFieldHorarioFinalModalidade.setText(""); //Limpa campo horario final
        }

        //Checa o campo Hra. Inicio
        campo = jTextFieldHorarioInicioModalidade.getText();
        if (("".equals(campo)) || (Float.parseFloat(campo) > 24.59) || (Float.parseFloat(campo) < 0)) {
            valido = false;
            msgErro += "Horario Inicio invalido. Deve estar entre 0.0 e 24.59\n";
            jTextFieldHorarioInicioModalidade.setText(""); //Limpa campo horario inicio
        }

        //Checa o campo nome
        campo = jTextFieldNomeModalidade.getText();
        if ((campo.length() < 40) && !("".equals(campo))) {
	    //Campo possivelmente válido
            //Checar unicidade
            //INFO: Código Legado modificado.
            if ((flagAnterior == INSERIR) || (!campo.equals(modalidadeAlterar.getNome()))) {
                try {
                    EntityManagerFactory emf = Persistence.createEntityManagerFactory("AcademiaVisualPU");
                    ModalidadesJpaController modalidadeJpaController = new ModalidadesJpaController(emf);
                    Modalidades resultado = (Modalidades) modalidadeJpaController.findModalidadeByNome(campo);
                    if (resultado != null) {
                        //Encontrou um nome identico
                        valido = false;
                        msgErro += "Nome inválido. O campo deve ser único\n";
                        jTextFieldNomeModalidade.setText("");
                    }
                } catch (Exception e) {
                    //TODO: Definir melhor qual tipo de exceção é lançada
                    e.printStackTrace();
                }
            }
        } else {
            valido = false;
            msgErro += "Nome inválido. O campo não deve ser nulo e deve ser menor que 40 caracteres\n";
            jTextFieldNomeModalidade.setText(""); //limpa o campo nome
        }

        //Checa o campo preco
        campo = jTextFieldPrecoModalidade.getText();
        if (("".equals(campo)) || (Float.parseFloat(campo) <= 0)) {
            valido = false;
            msgErro += "Preco inválida. O campo nao deve ser nulo e deve ser maior que zero\n";
            jTextFieldPrecoModalidade.setText("");
        }

        //Checa o campo Max. Alunos
        campo = jTextFieldMaxAlunosModalidade.getText();
        if (("".equals(campo)) || (Float.parseFloat(campo) <= 0)) {
            valido = false;
            msgErro += "Max. Alunos inválido. O campo não deve ser nulo e deve ser maior que zero\n";
            jTextFieldMaxAlunosModalidade.setText("");
        }
        if (!valido) {
            JOptionPane.showMessageDialog(null, msgErro, "Campos Invalidos!", JOptionPane.ERROR_MESSAGE);
        }
        return valido;
    }
    private int flagAnterior; //Define qual botão foi clicado
    private Modalidades modalidade; //Endereça objetos criados
    
    private void jButtonFecharModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharModalidadeActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFecharModalidadeActionPerformed

    private void jTextFieldProcurarModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProcurarModalidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProcurarModalidadeActionPerformed

    private void jButtonInserirModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInserirModalidadeActionPerformed
        flagAnterior = INSERIR;
        popularCamposAlterar(null);        
        abaAlterar();
    }//GEN-LAST:event_jButtonInserirModalidadeActionPerformed

    private void jButtonAlterarModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarModalidadeActionPerformed
        flagAnterior = ALTERAR;
        modalidadeAlterar = modalidadesList1.get(jTableModalidade.getSelectedRow());
        popularCamposAlterar(modalidadeAlterar);
        abaAlterar();
    }//GEN-LAST:event_jButtonAlterarModalidadeActionPerformed

    private void jButtonExcluirModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirModalidadeActionPerformed
        if (!modalidadesList1.isEmpty() && jTableModalidade.getSelectedRow() != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Verifique com atenção os dados que deseja excluir!\n"
                    + "Clique em sim se esse for mesmo a modalidade que deseja excluir.\n"
                    + "Clique em cancelar para voltar.");
            if (option == JOptionPane.YES_OPTION) {
                try {
                    /*
                     EXCLUIR O USUARIO DE TODOS AS TABELAS QUE UTILIZAM O MESMO !
                     Acho que não é necessário -- Luccas.
                     */
                    modalidadesList1.get(jTableModalidade.getSelectedRow()).excluir();
                    modalidadesList1.remove(jTableModalidade.getSelectedRow());
                    jTableModalidade.updateUI();
                    jTableModalidade.repaint();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Exclusão cancelada !");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma modalidade !");
        }
    }//GEN-LAST:event_jButtonExcluirModalidadeActionPerformed

    private void jButtonConfirmarModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarModalidadeActionPerformed
         boolean atualizacaoFeita = false; /*Indica que a atualização/inserção foi feita com sucesso,
         mantendo a aba de alteração focada.
         */
        if (flagAnterior == INSERIR) {
            //Verifica se os campos estão corretos antes de modificá-los.
            if (validacaoDeCampos()) {
                modalidade = new Modalidades(); //Cria um aluno vazio
                popularObjeto(modalidade); //Popula o objeto
                //Insere o objeto no banco de dados
                modalidade.incluir();
                /*Coisas do bind: Para adicionar elemento por ultimo na tabela inserir na penultima posição
                 tipo: list.size() - 1 -> Não faz sentido, mas é assim que o bind funciona...
                 */
                modalidadesList1.add(modalidadesList1.size() - 1, modalidade);
                jTableModalidade.repaint();
                atualizacaoFeita = true;
            }
        }
        if (flagAnterior == ALTERAR) {
            //Verifica se os campos estão corretos para atualizá-los
            if (validacaoDeCampos()) {
                popularObjeto(modalidadeAlterar);
                //altera o aluno no banco de dados
                modalidadeAlterar.alterar();
                jTableModalidade.repaint();
                atualizacaoFeita = true;
            }
        }
        if (atualizacaoFeita) {
            abaConsulta();
        }
    }//GEN-LAST:event_jButtonConfirmarModalidadeActionPerformed

    private void jButtonCancelarModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarModalidadeActionPerformed
        abaConsulta();
    }//GEN-LAST:event_jButtonCancelarModalidadeActionPerformed

    private void jButtonProcurarModalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcurarModalidadeActionPerformed
        String[] sql = {"", "SELECT m FROM Modalidades m WHERE m.nome LIKE :nome "};
        try {
            Query query = null;
            if (jTextFieldProcurarModalidade.getText().length() > 0) {
                if (jComboBoxProcurarModalidade.getSelectedIndex() == 0) {
                    query = AcademiaVisualPUEntityManager.createNamedQuery("Modalidades.findById");
                    query.setParameter("id", Long.valueOf(jTextFieldProcurarModalidade.getText()));
                }
                if (jComboBoxProcurarModalidade.getSelectedIndex() == 1) {
                    query = AcademiaVisualPUEntityManager.createQuery(sql[1]);
                    query.setParameter("nome", '%' + jTextFieldProcurarModalidade.getText() + '%');
                }
            } else {
                query = modalidadesQuery1;
            }
            modalidadesList1.clear();
            modalidadesList1.addAll(query.getResultList());
            jTableModalidade.updateUI();
            jTableModalidade.repaint();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButtonProcurarModalidadeActionPerformed

    //Flags para identificar que botão foi clicado anteriormente.
    private final int INSERIR = 1;
    private final int ALTERAR = 2;
    //Aluno para ser alterado
    private Modalidades modalidadeAlterar;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager AcademiaVisualPUEntityManager;
    private javax.swing.JButton jButtonAlterarModalidade;
    private javax.swing.JButton jButtonCancelarModalidade;
    private javax.swing.JButton jButtonConfirmarModalidade;
    private javax.swing.JButton jButtonExcluirModalidade;
    private javax.swing.JButton jButtonFecharModalidade;
    private javax.swing.JButton jButtonInserirModalidade;
    private javax.swing.JButton jButtonProcurarModalidade;
    private javax.swing.JComboBox jComboBoxProcurarModalidade;
    private javax.swing.JLabel jLabelHorarioFinalModalidade;
    private javax.swing.JLabel jLabelHorarioInicioModalidade;
    private javax.swing.JLabel jLabelIdModalidade;
    private javax.swing.JLabel jLabelMaxAlunosModalidade;
    private javax.swing.JLabel jLabelNomeModalidade;
    private javax.swing.JLabel jLabelPrecoModalidade;
    private javax.swing.JLabel jLabelProcurarModalidade;
    private javax.swing.JPanel jPanelAlterarAluno;
    private javax.swing.JPanel jPanelConsultaModalidade;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPaneModalidade;
    private javax.swing.JTable jTableModalidade;
    private javax.swing.JTextField jTextFieldHorarioFinalModalidade;
    private javax.swing.JTextField jTextFieldHorarioInicioModalidade;
    private javax.swing.JTextField jTextFieldIdModalidade;
    private javax.swing.JTextField jTextFieldMaxAlunosModalidade;
    private javax.swing.JTextField jTextFieldNomeModalidade;
    private javax.swing.JTextField jTextFieldPrecoModalidade;
    private javax.swing.JTextField jTextFieldProcurarModalidade;
    private java.util.List<DataBase.Modalidades> modalidadesList;
    private java.util.List<DataBase.Modalidades> modalidadesList1;
    private javax.persistence.Query modalidadesQuery;
    private javax.persistence.Query modalidadesQuery1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
