/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import DAO.ModalidadesJpaController;
import DAO.ProdutosJpaController;
import DataBase.Modalidades;
import DataBase.Produtos;
import academiavisual.FormPrincipal;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;

/**
 *
 * @author afnsoo
 */
public class JInternalFrameCadastroProduto extends javax.swing.JInternalFrame {

    /**
     * Creates new form JInternalFrameCadastroProduto
     */
    public JInternalFrameCadastroProduto() {
        initComponents();
        if(TelaInicial.verificarAdministrador(FormPrincipal.TREINADORID)){
            jButtonInserirProduto.setEnabled(false);
            jButtonAlterarProduto.setEnabled(false);
            jButtonExcluirProduto.setEnabled(false);            
        }
        abaConsulta();
        System.out.println("produtosList1 Class : " + produtosList1.getClass().getName());
        System.out.println("Size: " + produtosList1.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        AcademiaVisualPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("AcademiaVisualPU").createEntityManager();
        produtosQuery = java.beans.Beans.isDesignTime() ? null : AcademiaVisualPUEntityManager.createQuery("SELECT p FROM Produtos p");
        produtosList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : produtosQuery.getResultList();
        modalidadesQuery = java.beans.Beans.isDesignTime() ? null : AcademiaVisualPUEntityManager.createQuery("SELECT m FROM Modalidades m");
        modalidadesList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : modalidadesQuery.getResultList();
        produtosQuery1 = java.beans.Beans.isDesignTime() ? null : AcademiaVisualPUEntityManager.createQuery("SELECT p FROM Produtos p");
        produtosList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : produtosQuery1.getResultList();
        jButtonExcluirProduto = new javax.swing.JButton();
        jButtonFecharProduto = new javax.swing.JButton();
        jTabbedPaneProduto = new javax.swing.JTabbedPane();
        jPanelConsultaAluno = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduto = new javax.swing.JTable();
        jLabelProcurarProduto = new javax.swing.JLabel();
        jTextFieldProcurarProduto = new javax.swing.JTextField();
        jComboBoxProcurarProduto = new javax.swing.JComboBox();
        jButtonProcurarProduto = new javax.swing.JButton();
        jPanelAlterarAluno = new javax.swing.JPanel();
        jLabelIdProduto = new javax.swing.JLabel();
        jLabelNomeProduto = new javax.swing.JLabel();
        jLabelPrecoProduto = new javax.swing.JLabel();
        jLabelDescricaoProduto = new javax.swing.JLabel();
        jLabelDescontoProduto = new javax.swing.JLabel();
        jTextFieldIdProduto = new javax.swing.JTextField();
        jTextFieldNomeProduto = new javax.swing.JTextField();
        jTextFieldPrecoProduto = new javax.swing.JTextField();
        jTextFieldDescontoProduto = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaDescricaoProduto = new javax.swing.JTextArea();
        jButtonCancelarProduto = new javax.swing.JButton();
        jButtonConfirmarProduto = new javax.swing.JButton();
        jButtonInserirProduto = new javax.swing.JButton();
        jButtonAlterarProduto = new javax.swing.JButton();

        setTitle("Cadastro Produto");

        jButtonExcluirProduto.setText("Excluir");
        jButtonExcluirProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirProdutoActionPerformed(evt);
            }
        });

        jButtonFecharProduto.setText("Fechar");
        jButtonFecharProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharProdutoActionPerformed(evt);
            }
        });

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, produtosList1, jTableProduto);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nome}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${preco}"));
        columnBinding.setColumnName("Preco");
        columnBinding.setColumnClass(Float.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${descricao}"));
        columnBinding.setColumnName("Descricao");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${desconto}"));
        columnBinding.setColumnName("Desconto");
        columnBinding.setColumnClass(Float.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jTableProduto);

        jLabelProcurarProduto.setText("Opção De Busca");

        jTextFieldProcurarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProcurarProdutoActionPerformed(evt);
            }
        });

        jComboBoxProcurarProduto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Id", "Nome" }));

        jButtonProcurarProduto.setText("Buscar");
        jButtonProcurarProduto.setMaximumSize(new java.awt.Dimension(75, 23));
        jButtonProcurarProduto.setMinimumSize(new java.awt.Dimension(75, 23));
        jButtonProcurarProduto.setPreferredSize(new java.awt.Dimension(75, 23));
        jButtonProcurarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcurarProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelConsultaAlunoLayout = new javax.swing.GroupLayout(jPanelConsultaAluno);
        jPanelConsultaAluno.setLayout(jPanelConsultaAlunoLayout);
        jPanelConsultaAlunoLayout.setHorizontalGroup(
            jPanelConsultaAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
            .addGroup(jPanelConsultaAlunoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelProcurarProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxProcurarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldProcurarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonProcurarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelConsultaAlunoLayout.setVerticalGroup(
            jPanelConsultaAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConsultaAlunoLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanelConsultaAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProcurarProduto)
                    .addComponent(jTextFieldProcurarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProcurarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxProcurarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPaneProduto.addTab("Consulta", jPanelConsultaAluno);

        jLabelIdProduto.setText("ID:");

        jLabelNomeProduto.setText("Nome:");

        jLabelPrecoProduto.setText("Preco:");

        jLabelDescricaoProduto.setText("Descricao:");

        jLabelDescontoProduto.setText("Desconto(%):");

        jTextFieldIdProduto.setEditable(false);

        jTextAreaDescricaoProduto.setColumns(20);
        jTextAreaDescricaoProduto.setRows(5);
        jScrollPane2.setViewportView(jTextAreaDescricaoProduto);

        javax.swing.GroupLayout jPanelAlterarAlunoLayout = new javax.swing.GroupLayout(jPanelAlterarAluno);
        jPanelAlterarAluno.setLayout(jPanelAlterarAlunoLayout);
        jPanelAlterarAlunoLayout.setHorizontalGroup(
            jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAlterarAlunoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDescontoProduto)
                    .addComponent(jLabelDescricaoProduto)
                    .addComponent(jLabelPrecoProduto)
                    .addComponent(jLabelNomeProduto)
                    .addComponent(jLabelIdProduto))
                .addGap(97, 97, 97)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldIdProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(jTextFieldNomeProduto)
                    .addComponent(jTextFieldPrecoProduto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldDescontoProduto)
                    .addComponent(jScrollPane2))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanelAlterarAlunoLayout.setVerticalGroup(
            jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAlterarAlunoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIdProduto)
                    .addComponent(jTextFieldIdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeProduto)
                    .addComponent(jTextFieldNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrecoProduto)
                    .addComponent(jTextFieldPrecoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDescricaoProduto)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAlterarAlunoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDescontoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDescontoProduto))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jTabbedPaneProduto.addTab("Alterar", jPanelAlterarAluno);

        jButtonCancelarProduto.setText("Cancelar");
        jButtonCancelarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarProdutoActionPerformed(evt);
            }
        });

        jButtonConfirmarProduto.setText("Confirmar");
        jButtonConfirmarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarProdutoActionPerformed(evt);
            }
        });

        jButtonInserirProduto.setText("Inserir");
        jButtonInserirProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInserirProdutoActionPerformed(evt);
            }
        });

        jButtonAlterarProduto.setText("Alterar");
        jButtonAlterarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneProduto)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonInserirProduto)
                .addGap(18, 18, 18)
                .addComponent(jButtonAlterarProduto)
                .addGap(18, 18, 18)
                .addComponent(jButtonExcluirProduto)
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmarProduto)
                .addGap(18, 18, 18)
                .addComponent(jButtonCancelarProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonFecharProduto)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInserirProduto)
                    .addComponent(jButtonAlterarProduto)
                    .addComponent(jButtonExcluirProduto)
                    .addComponent(jButtonFecharProduto)
                    .addComponent(jButtonCancelarProduto)
                    .addComponent(jButtonConfirmarProduto))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

     //Bind automático não funiona como o esperado. Os métodos abaixo circulam este problema.
    /**
     * Popula os textField da aba Alterar.
     *
     * @param a Fonte dos dados para o textField, caso seja null os campos serão
     * esvaziados.
     */
    private void popularCamposAlterar(Produtos p) {
        if (p == null) {
            jTextAreaDescricaoProduto.setText("");
            jTextFieldIdProduto.setText("");
            jTextFieldNomeProduto.setText("");           
            jTextFieldPrecoProduto.setText("");
            jTextFieldDescontoProduto.setText("");
        } else {
            jTextAreaDescricaoProduto.setText(p.getDescricao());
            jTextFieldIdProduto.setText(Integer.toString(p.getId()));
            jTextFieldNomeProduto.setText(p.getNome());           
            jTextFieldPrecoProduto.setText(Float.toString(p.getPreco()));
            jTextFieldDescontoProduto.setText(Float.toString(p.getDesconto()));            
        }
    }

    /**
     * Após a edição do objeto pega dados da aba Alterar e coloca no objeto.
     *
     * @param a Objeto a ser populado.
     */
    private void popularObjeto(Produtos p) {
        //TODO: Garantir que @param não é nulo
        /*O campo ID é gerado pelo banco de dados*/
        p.setNome(jTextFieldNomeProduto.getText());        
        p.setPreco(Float.parseFloat(jTextFieldPrecoProduto.getText()));        
        p.setDescricao(jTextAreaDescricaoProduto.getText());
        p.setDesconto(Float.parseFloat(jTextFieldDescontoProduto.getText()));        
    }

    /**
     * Entra na Aba de Consulta
     */
    private void abaConsulta() {
        jTabbedPaneProduto.setSelectedIndex(0);
        jTabbedPaneProduto.setEnabledAt(0, true);
        jTabbedPaneProduto.setEnabledAt(1, false);
        jButtonConfirmarProduto.setEnabled(false);
        jButtonCancelarProduto.setEnabled(false);
        jButtonInserirProduto.setEnabled(true);
        jButtonAlterarProduto.setEnabled(true);
        jButtonExcluirProduto.setEnabled(true);
    }

    /**
     * Entra na Aba de Alterar
     */
    private void abaAlterar() {
        jTabbedPaneProduto.setSelectedIndex(1);
        jTabbedPaneProduto.setEnabledAt(1, true);
        jTabbedPaneProduto.setEnabledAt(0, false);
        jButtonInserirProduto.setEnabled(false);
        jButtonAlterarProduto.setEnabled(false);
        jButtonExcluirProduto.setEnabled(false);
        jButtonConfirmarProduto.setEnabled(true);
        jButtonCancelarProduto.setEnabled(true);

    }

    /**
     * Valida os campos de acordo com as normas:
     * <ul>
     * <li> 
     * </ul>
     *
     * @return <b>true</b> caso passe na validação, <b>false</b> caso contrário.
     */
    private boolean validacaoDeCampos() {
        boolean valido = true;
        String msgErro = "";
        String campo;      

        //Checa o campo Preco
        campo = jTextFieldPrecoProduto.getText();
        if (("".equals(campo)) || (Float.parseFloat(campo) <= 0)) {
            valido = false;
            msgErro += "Preco Invalido. Deve ser maior que zero\n";
            jTextFieldPrecoProduto.setText(""); //Limpa campo preco 
        }

        //Checa o campo Desconto
        campo = jTextFieldDescontoProduto.getText();
        if (("".equals(campo)) || (Float.parseFloat(campo) > 100) || (Float.parseFloat(campo) < 0)) {
            valido = false;
            msgErro += "Desconto Invalido. Nao pode ser menor que zero ou maior que cem\n";
            jTextFieldDescontoProduto.setText(""); //Limpa campo desconto
        }

        //Checa o campo nome
        campo = jTextFieldNomeProduto.getText();
        if ((campo.length() < 40) && !("".equals(campo))) {
	    //Campo possivelmente válido
            //Checar unicidade
            //INFO: Código Legado modificado.
            if ((flagAnterior == INSERIR) || (!campo.equals(produtosAlterar.getNome()))) {
                try {
                    EntityManagerFactory emf = Persistence.createEntityManagerFactory("AcademiaVisualPU");
                    ProdutosJpaController produtoJpaController = new ProdutosJpaController(emf);
                    Produtos resultado = (Produtos) produtoJpaController.findProdutoByNome(campo);
                    if (resultado != null) {
                        //Encontrou um nome identico
                        valido = false;
                        msgErro += "Nome inválido. O campo deve ser único\n";
                        jTextFieldNomeProduto.setText("");
                    }
                } catch (Exception e) {
                    //TODO: Definir melhor qual tipo de exceção é lançada
                    e.printStackTrace();
                }
            }
        } else {
            valido = false;
            msgErro += "Nome inválido. O campo não deve ser nulo e deve ser menor que 40 caracteres\n";
            jTextFieldNomeProduto.setText(""); //limpa o campo nome
        }

        //Checa o campo descricao
        campo = jTextAreaDescricaoProduto.getText();
        if (("".equals(campo))) {
            valido = false;
            msgErro += "Descricao invalida. Entre com a descricao do produto\n";
            jTextAreaDescricaoProduto.setText("");
        }
       
        if (!valido) {
            JOptionPane.showMessageDialog(null, msgErro, "Campos Invalidos!", JOptionPane.ERROR_MESSAGE);
        }
        return valido;
    }
    private int flagAnterior; //Define qual botão foi clicado
    private Produtos produto; //Endereça objetos criados
    
    private void jButtonFecharProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharProdutoActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonFecharProdutoActionPerformed

    private void jTextFieldProcurarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProcurarProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProcurarProdutoActionPerformed

    private void jButtonInserirProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInserirProdutoActionPerformed
        flagAnterior = INSERIR;
        popularCamposAlterar(null);        
        abaAlterar();
    }//GEN-LAST:event_jButtonInserirProdutoActionPerformed

    private void jButtonAlterarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarProdutoActionPerformed
        flagAnterior = ALTERAR;
        produtosAlterar = produtosList1.get(jTableProduto.getSelectedRow());
        popularCamposAlterar(produtosAlterar);
        abaAlterar();
    }//GEN-LAST:event_jButtonAlterarProdutoActionPerformed

    private void jButtonExcluirProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirProdutoActionPerformed
        if (!produtosList1.isEmpty() && jTableProduto.getSelectedRow() != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Verifique com atenção os dados que deseja excluir!\n"
                    + "Clique em sim se esse for mesmo a modalidade que deseja excluir.\n"
                    + "Clique em cancelar para voltar.");
            if (option == JOptionPane.YES_OPTION) {
                try {
                    /*
                     EXCLUIR O USUARIO DE TODOS AS TABELAS QUE UTILIZAM O MESMO !
                     Acho que não é necessário -- Luccas.
                     */
                    produtosList1.get(jTableProduto.getSelectedRow()).excluir();
                    produtosList1.remove(jTableProduto.getSelectedRow());
                    jTableProduto.updateUI();
                    jTableProduto.repaint();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Exclusão cancelada !");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma produto !");
        }
    }//GEN-LAST:event_jButtonExcluirProdutoActionPerformed

    private void jButtonConfirmarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarProdutoActionPerformed
        boolean atualizacaoFeita = false; /*Indica que a atualização/inserção foi feita com sucesso,
         mantendo a aba de alteração focada.
         */
        if (flagAnterior == INSERIR) {
            //Verifica se os campos estão corretos antes de modificá-los.
            if (validacaoDeCampos()) {
                produto = new Produtos(); //Cria um aluno vazio
                popularObjeto(produto); //Popula o objeto
                //Insere o objeto no banco de dados
                produto.incluir();
                /*Coisas do bind: Para adicionar elemento por ultimo na tabela inserir na penultima posição
                 tipo: list.size() - 1 -> Não faz sentido, mas é assim que o bind funciona...
                 */
                produtosList1.add(produtosList1.size() - 1, produto);
                jTableProduto.repaint();
                atualizacaoFeita = true;
            }
        }
        if (flagAnterior == ALTERAR) {
            //Verifica se os campos estão corretos para atualizá-los
            if (validacaoDeCampos()) {
                popularObjeto(produtosAlterar);
                //altera o aluno no banco de dados
                produtosAlterar.alterar();
                jTableProduto.repaint();
                atualizacaoFeita = true;
            }
        }
        if (atualizacaoFeita) {
            abaConsulta();
        }
    }//GEN-LAST:event_jButtonConfirmarProdutoActionPerformed

    private void jButtonCancelarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarProdutoActionPerformed
        abaConsulta();
    }//GEN-LAST:event_jButtonCancelarProdutoActionPerformed

    private void jButtonProcurarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcurarProdutoActionPerformed
        String[] sql = {"", "SELECT p FROM Produtos p WHERE p.nome LIKE :nome "};
        try {
            Query query = null;
            if (jTextFieldProcurarProduto.getText().length() > 0) {
                if (jComboBoxProcurarProduto.getSelectedIndex() == 0) {
                    query = AcademiaVisualPUEntityManager.createNamedQuery("Produtos.findById");
                    query.setParameter("id", Long.valueOf(jTextFieldProcurarProduto.getText()));
                }
                if (jComboBoxProcurarProduto.getSelectedIndex() == 1) {
                    query = AcademiaVisualPUEntityManager.createQuery(sql[1]);
                    query.setParameter("nome", '%' + jTextFieldProcurarProduto.getText() + '%');
                }
            } else {
                query = produtosQuery1;
            }
            produtosList1.clear();
            produtosList1.addAll(query.getResultList());
            jTableProduto.updateUI();
            jTableProduto.repaint();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButtonProcurarProdutoActionPerformed

    //Flags para identificar que botão foi clicado anteriormente.
    private final int INSERIR = 1;
    private final int ALTERAR = 2;
    //Aluno para ser alterado
    private Produtos produtosAlterar;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager AcademiaVisualPUEntityManager;
    private javax.swing.JButton jButtonAlterarProduto;
    private javax.swing.JButton jButtonCancelarProduto;
    private javax.swing.JButton jButtonConfirmarProduto;
    private javax.swing.JButton jButtonExcluirProduto;
    private javax.swing.JButton jButtonFecharProduto;
    private javax.swing.JButton jButtonInserirProduto;
    private javax.swing.JButton jButtonProcurarProduto;
    private javax.swing.JComboBox jComboBoxProcurarProduto;
    private javax.swing.JLabel jLabelDescontoProduto;
    private javax.swing.JLabel jLabelDescricaoProduto;
    private javax.swing.JLabel jLabelIdProduto;
    private javax.swing.JLabel jLabelNomeProduto;
    private javax.swing.JLabel jLabelPrecoProduto;
    private javax.swing.JLabel jLabelProcurarProduto;
    private javax.swing.JPanel jPanelAlterarAluno;
    private javax.swing.JPanel jPanelConsultaAluno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneProduto;
    private javax.swing.JTable jTableProduto;
    private javax.swing.JTextArea jTextAreaDescricaoProduto;
    private javax.swing.JTextField jTextFieldDescontoProduto;
    private javax.swing.JTextField jTextFieldIdProduto;
    private javax.swing.JTextField jTextFieldNomeProduto;
    private javax.swing.JTextField jTextFieldPrecoProduto;
    private javax.swing.JTextField jTextFieldProcurarProduto;
    private java.util.List<DataBase.Modalidades> modalidadesList;
    private javax.persistence.Query modalidadesQuery;
    private java.util.List<DataBase.Produtos> produtosList;
    private java.util.List<DataBase.Produtos> produtosList1;
    private javax.persistence.Query produtosQuery;
    private javax.persistence.Query produtosQuery1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
